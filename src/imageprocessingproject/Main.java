/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imageprocessingproject;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;
import java.awt.image.RescaleOp;
import java.io.File;
import java.io.IOException;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SpringLayout;

/**
 *
 * @author linganesan
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    private File PathIm = null;
    private File savepath = null;
    private int index;
    String namePathImage = null;
    JFileChooser chooser = new JFileChooser(".");
    private JPanel jContentPane1 = null;
    private JPanel jContentPane2 = null;
    JPanel panel = null;
    JTextArea textArea = null;
    RGBchannel channel;
    Metadata metadata;
    BufferedImage image = null;
    private boolean savetrigger = true;
    int binc, bdec;

    public Main() {
        initComponents();
        closedMenuItems();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openmenu = new javax.swing.JMenuItem();
        savemenu = new javax.swing.JMenuItem();
        saveasmenu = new javax.swing.JMenuItem();
        metaDatamenu = new javax.swing.JMenuItem();
        histomenu = new javax.swing.JMenuItem();
        closemenu = new javax.swing.JMenuItem();
        exitmenu = new javax.swing.JMenuItem();
        rgbmenu = new javax.swing.JMenu();
        clonemenu = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        resetmenu = new javax.swing.JMenuItem();
        negmenu = new javax.swing.JMenuItem();
        conmenu = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        incmenu = new javax.swing.JMenuItem();
        decmenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        projectmenu = new javax.swing.JMenuItem();

        jMenuItem6.setText("jMenuItem6");

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Image Processing Tool");
        setForeground(new java.awt.Color(195, 243, 231));
        setMinimumSize(new java.awt.Dimension(866, 550));
        setPreferredSize(new java.awt.Dimension(900, 600));
        setType(java.awt.Window.Type.UTILITY);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTabbedPane1.setBackground(new java.awt.Color(185, 254, 246));
        jTabbedPane1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.setAutoscrolls(true);
        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 850, 530));
        jTabbedPane1.getAccessibleContext().setAccessibleName("");

        jMenu1.setText("File");

        openmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openmenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/open.jpg"))); // NOI18N
        openmenu.setText("Open");
        openmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openmenuActionPerformed(evt);
            }
        });
        jMenu1.add(openmenu);

        savemenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        savemenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Save.png"))); // NOI18N
        savemenu.setText("Save");
        savemenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savemenuActionPerformed(evt);
            }
        });
        jMenu1.add(savemenu);

        saveasmenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/saveas.png"))); // NOI18N
        saveasmenu.setText("Save As");
        saveasmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveasmenuActionPerformed(evt);
            }
        });
        jMenu1.add(saveasmenu);

        metaDatamenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        metaDatamenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Metadata.jpg"))); // NOI18N
        metaDatamenu.setText("MetaData");
        metaDatamenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metaDatamenuActionPerformed(evt);
            }
        });
        jMenu1.add(metaDatamenu);

        histomenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        histomenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/histo.gif"))); // NOI18N
        histomenu.setText("Histogram");
        histomenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                histomenuActionPerformed(evt);
            }
        });
        jMenu1.add(histomenu);

        closemenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/close.png"))); // NOI18N
        closemenu.setText("Close");
        closemenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closemenuActionPerformed(evt);
            }
        });
        jMenu1.add(closemenu);

        exitmenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Exit.jpg"))); // NOI18N
        exitmenu.setText("Exit");
        exitmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitmenuActionPerformed(evt);
            }
        });
        jMenu1.add(exitmenu);

        jMenuBar1.add(jMenu1);

        rgbmenu.setText("Edit");

        clonemenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/clone.png"))); // NOI18N
        clonemenu.setText("Clone");
        clonemenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clonemenuActionPerformed(evt);
            }
        });
        rgbmenu.add(clonemenu);

        jMenuItem7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/RGB.jpg"))); // NOI18N
        jMenuItem7.setText("RGBChannel");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        rgbmenu.add(jMenuItem7);

        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Image.PNG"))); // NOI18N
        jMenuItem2.setText("Scale");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        rgbmenu.add(jMenuItem2);

        jMenuBar1.add(rgbmenu);

        jMenu3.setText("Tools");

        resetmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        resetmenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/reset.png"))); // NOI18N
        resetmenu.setText("Reset");
        resetmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetmenuActionPerformed(evt);
            }
        });
        jMenu3.add(resetmenu);

        negmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        negmenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/negative.gif"))); // NOI18N
        negmenu.setText("Negative");
        negmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negmenuActionPerformed(evt);
            }
        });
        jMenu3.add(negmenu);

        conmenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Image.PNG"))); // NOI18N
        conmenu.setText("Contrast");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Increase");
        conmenu.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Decrease");
        conmenu.add(jMenuItem4);

        jMenu3.add(conmenu);

        jMenu4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Image.PNG"))); // NOI18N
        jMenu4.setText("Brightness");

        incmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        incmenu.setText("Increase");
        incmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incmenuActionPerformed(evt);
            }
        });
        jMenu4.add(incmenu);

        decmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        decmenu.setText("Decrease");
        decmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decmenuActionPerformed(evt);
            }
        });
        jMenu4.add(decmenu);

        jMenu3.add(jMenu4);

        jMenuBar1.add(jMenu3);

        jMenu2.setText("About");

        projectmenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/INFO.PNG"))); // NOI18N
        projectmenu.setText("Project");
        projectmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectmenuActionPerformed(evt);
            }
        });
        jMenu2.add(projectmenu);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void openmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openmenuActionPerformed
        openDialog();

    }//GEN-LAST:event_openmenuActionPerformed

    private void closemenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closemenuActionPerformed
        closedMenuItems();


    }//GEN-LAST:event_closemenuActionPerformed

    private void savemenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savemenuActionPerformed
        if (savetrigger) {
            saveAs();
        } else {
            save();
        }
    }//GEN-LAST:event_savemenuActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // channel = new RGBchannel(namePathImage);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void metaDatamenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metaDatamenuActionPerformed
        metadata = new Metadata();
        textArea = metadata.readAndDisplayMetadata(namePathImage);
        jTabbedPane1.add("MetaData", textArea);
    }//GEN-LAST:event_metaDatamenuActionPerformed

    private void saveasmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveasmenuActionPerformed
        saveAs();

    }//GEN-LAST:event_saveasmenuActionPerformed

    private void exitmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitmenuActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitmenuActionPerformed

    private void clonemenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clonemenuActionPerformed
        addTab(image, "Clone");
    }//GEN-LAST:event_clonemenuActionPerformed

    private void histomenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_histomenuActionPerformed
        Histogram();
    }//GEN-LAST:event_histomenuActionPerformed

    private void projectmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectmenuActionPerformed
        JOptionPane jOptionPane = new JOptionPane();
        JTextArea jTextArea = new JTextArea();
        jTextArea.setEditable(false);
        jTextArea.setText("Name : Linganesan \n"
                + "Module : CS3712 \n"
                + "Reg No : 120337H \n"
                + "University : UOM \n"
                + "Email Id : linganesan.12@cse.mrt.ac.lk\n"
        );
        jOptionPane.showMessageDialog(null,
                jTextArea,
                "Image Processing Tool",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_projectmenuActionPerformed

    private void negmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negmenuActionPerformed
        BufferedImage temp = negativeimage(image);
        addTab(temp, "Negative");

    }//GEN-LAST:event_negmenuActionPerformed

    private void resetmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetmenuActionPerformed
        try {
            JPanel temppane = getJContentPane1();
            index = jTabbedPane1.getSelectedIndex();
            jTabbedPane1.setComponentAt(index, temppane);
            binc = 0;
            bdec = 0;
            index = 0;

        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_resetmenuActionPerformed

    private void incmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incmenuActionPerformed
        brightinc();
    }//GEN-LAST:event_incmenuActionPerformed

    private void decmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decmenuActionPerformed
        brightdec();
    }//GEN-LAST:event_decmenuActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        createScalePanel();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void save() {
        BufferedImage bi = null;

        try {
            bi = ImageIO.read(PathIm);
        } catch (IOException ex) {
            //Logger.gteLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            ImageIO.write(bi, "jpeg", savepath);
        } catch (IOException ex) {
        }

    }

    private void saveAs() {
        BufferedImage bi = null;

        try {
            bi = ImageIO.read(PathIm);
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Demonstrate "Save" dialog:
        File saveFile = new File("ImageName." + "png");
        JFileChooser chooser = new JFileChooser();
        chooser.setSelectedFile(saveFile);
        int rval = chooser.showSaveDialog(this);
        if (rval == JFileChooser.APPROVE_OPTION) {
            saveFile = chooser.getSelectedFile();
            savepath = saveFile;
            try {
                ImageIO.write(bi, "jpeg", saveFile);
                savetrigger = false;
            } catch (IOException ex) {
            }
        }
    }

    private void closedMenuItems() {
        savemenu.setEnabled(false);
        saveasmenu.setEnabled(false);
        metaDatamenu.setEnabled(false);
        closemenu.setEnabled(false);
        clonemenu.setEnabled(false);
        rgbmenu.setEnabled(false);
        histomenu.setEnabled(false);
        jMenu3.setEnabled(false);
        //
        openmenu.setEnabled(true);
        savepath = null;
        PathIm = null;
        image = null;
        namePathImage = null;
        jContentPane1 = null;
        jContentPane2 = null;
        panel = null;
        textArea = null;
        binc = 0;
        bdec = 0;
        index = 0;
        jTabbedPane1.removeAll();

    }

    private void openMenuItems() {
        savemenu.setEnabled(true);
        saveasmenu.setEnabled(true);
        metaDatamenu.setEnabled(true);
        closemenu.setEnabled(true);
        clonemenu.setEnabled(true);
        rgbmenu.setEnabled(true);
        histomenu.setEnabled(true);
        jMenu3.setEnabled(true);
        openmenu.setEnabled(false);
    }

    public void addTab(BufferedImage image, String title) {

        JLabel label = new JLabel();
        label.setHorizontalAlignment(JLabel.CENTER);
        JPanel temppane = new JPanel();
        ImageIcon icon = new ImageIcon(image);
        label.setIcon(icon);
        temppane.add(label, BorderLayout.CENTER);
        temppane.revalidate();

        jTabbedPane1.addTab(title, temppane);

    }

    private void openDialog() {
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            //System.out.println("selectedFile = " + chooser.getSelectedFile());
            namePathImage = chooser.getSelectedFile().getAbsolutePath();
            //System.out.println("namePathImage = " + namePathImage);

            try {
                panel = getJContentPane1();
                jTabbedPane1.addTab(namePathImage, panel);

                openMenuItems();
            } catch (IOException e) {
                System.out.println("io error: " + e.getMessage());
                return;
            }
        }
    }

    private JPanel getJContentPane1() throws IOException {
        if (jContentPane1 == null) {
            jContentPane1 = new JPanel();
            jContentPane1.setLayout(new BorderLayout());
        }

        // jContentPane1.removeAll();
        JLabel label = new JLabel();
        label.setHorizontalAlignment(JLabel.CENTER);
        if (namePathImage != null) {
            File file = new File(namePathImage);
            PathIm = file;
            System.out.println("file path = " + file.getPath());
            image = ImageIO.read(file);
            ImageIcon icon = new ImageIcon(image);
            label.setIcon(icon);
        } else {
            label.setText("namePathImage = " + namePathImage);
        }
        jContentPane1.add(label, BorderLayout.CENTER);

        jContentPane1.revalidate();
        return jContentPane1;
    }

    public void Histogram() {
        histogram m = new histogram(image, "Histogram");
        Toolkit tk = Toolkit.getDefaultToolkit();
        Dimension d = tk.getScreenSize();
        m.setBounds(0, 0, (int) d.getWidth(), (int) d.getHeight());
        m.setVisible(true);
    }

    BufferedImage negativeimage(BufferedImage image) {
        int w = image.getWidth(this);
        int h = image.getHeight(this);
        int c, red, green, blue;
        BufferedImage newImage = new BufferedImage(w, h, 1);
        for (int y = 0; y < h; y++) {
            for (int x = 0; x < w; x++) {
                c = image.getRGB(x, y);
                red = 255 - getRed(c);
                green = 255 - getGreen(c);
                blue = 255 - getBlue(c);

                newImage.setRGB(x, y, createRGB(red, green, blue));

            }

        }
        return newImage;

    }

    BufferedImage grayscale(BufferedImage image, int d) {
        int c, red, green, blue, avg;
        int w = image.getWidth(this);
        int h = image.getHeight(this);
        BufferedImage newImage = new BufferedImage(w, h, 1);

        for (int y = 0; y < h; y++) {
            for (int x = 0; x < w; x++) {
                c = image.getRGB(x, y);
                red = getRed(c);
                green = getGreen(c);
                blue = getBlue(c);
                avg = (red + green + blue) / d;
                newImage.setRGB(x, y, createRGB(avg, avg, avg));
            }
        }
        return newImage;
    }

    BufferedImage brightness(BufferedImage image, int xx) {
        int w = image.getWidth(this);
        int h = image.getHeight(this);
        int c, red, green, blue;
        BufferedImage newImage = new BufferedImage(w, h, 1);
        for (int y = 0; y < h; y++) {
            for (int x = 0; x < w; x++) {
                c = image.getRGB(x, y);
                red = getRed(c) + xx;
                green = getGreen(c) + xx;
                blue = getBlue(c) + xx;

                if (red > 255) {
                    red = 255;
                }
                if (green > 255) {
                    green = 255;
                }
                if (blue > 255) {
                    blue = 255;
                }

                if (red < 0) {
                    red = 0;
                }
                if (green < 0) {
                    green = 0;
                }
                if (blue < 0) {
                    blue = 0;
                }

                newImage.setRGB(x, y, createRGB(red, green, blue));

            }

        }
        return newImage;

    }

    BufferedImage scale(BufferedImage image1, int rx, int ry) {
        AffineTransform tx = new AffineTransform();
        tx.scale(rx, ry);
        AffineTransformOp op = new AffineTransformOp(tx, null);
        return op.filter(image1, null);
    }

    public int getAlpha(int p) {
        return ((p >> 24) & 0xFF);
    }

    public int getRed(int p) {
        return ((p >> 16) & 0xFF);
    }

    public int getGreen(int p) {
        return ((p >> 8) & 0xFF);
    }

    public int getBlue(int p) {
        return (p & 0xff);
    }

    public int createRGB(int r, int g, int b) {
        //alpha =FF
        return new Color(r, g, b).getRGB();

    }

    public void brightinc() {
        binc += 10;
        BufferedImage temp;
        temp = brightness(image, binc);
        index = jTabbedPane1.getSelectedIndex();
        System.out.println(binc);
        changeImage(index, temp);
    }

    public void brightdec() {
        bdec -= 10;
        BufferedImage temp;
        temp = brightness(image, bdec);
        index = jTabbedPane1.getSelectedIndex();
        System.out.println(bdec);
        changeImage(index, temp);
    }

    private void changeImage(int index, BufferedImage ima) {

        JLabel label = new JLabel();
        label.setHorizontalAlignment(JLabel.CENTER);
        JPanel temppane = new JPanel();
        ImageIcon icon = new ImageIcon(ima);
        label.setIcon(icon);
        temppane.add(label, BorderLayout.CENTER);
        //temppane.revalidate();
        jTabbedPane1.setComponentAt(index, temppane);
    }

    private void createScalePanel() {

        final String[] labels = {"X: ", "Y:"};
        int labelsLength = labels.length;
        final JTextField[] textField = new JTextField[labels.length];
        //Create and populate the panel.
        JPanel p = new JPanel(new GridLayout(0, 2));
        for (int i = 0; i < labelsLength; i++) {
            JLabel l = new JLabel(labels[i], JLabel.TRAILING);
            p.add(l);
            textField[i] = new JTextField(10);
            l.setLabelFor(textField[i]);
            p.add(textField[i]);
        }

        int result = JOptionPane.showConfirmDialog(null, p, "Enter Scales", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            int x = Integer.parseInt(textField[0].getText());
            int y = Integer.parseInt(textField[1].getText());
            BufferedImage img = scale(image, x, y);
            addTab(img, "Scaled Image");

        }

    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem clonemenu;
    private javax.swing.JMenuItem closemenu;
    private javax.swing.JMenu conmenu;
    private javax.swing.JMenuItem decmenu;
    private javax.swing.JMenuItem exitmenu;
    private javax.swing.JMenuItem histomenu;
    private javax.swing.JMenuItem incmenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenuItem metaDatamenu;
    private javax.swing.JMenuItem negmenu;
    private javax.swing.JMenuItem openmenu;
    private javax.swing.JMenuItem projectmenu;
    private javax.swing.JMenuItem resetmenu;
    private javax.swing.JMenu rgbmenu;
    private javax.swing.JMenuItem saveasmenu;
    private javax.swing.JMenuItem savemenu;
    // End of variables declaration//GEN-END:variables

}
